# 229. Majority Element II
# Solved
# Medium
# Topics
# Companies
# Hint
# Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

# Example 1:

# Input: nums = [3,2,3]
# Output: [3]
# Example 2:

# Input: nums = [1]
# Output: [1]
# Example 3:

# Input: nums = [1,2]
# Output: [1,2]
 

# Constraints:

# 1 <= nums.length <= 5 * 104
# -109 <= nums[i] <= 109
 

# Follow up: Could you solve the problem in linear time and in O(1) space?
class Solution:
    def majorityElement(self, nums: List[int]) -> List[int]:
        cnt1,cnt2=0,0
        el1,el2=None,None
        n=len(nums)
        for i in range(n):
            if cnt1==0 and nums[i]!=el2:
                cnt1+=1
                el1=nums[i]
            elif cnt2==0 and nums[i]!=el1:
                cnt2+=1
                el2=nums[i]                
            elif nums[i]==el1:
                cnt1+=1
            elif nums[i]==el2:
                cnt2+=1
            else:
                cnt1-=1
                cnt2-=1
            
        cnt1,cnt2=0,0
        for num in nums:
            if num==el1: cnt1+=1
            if num==el2: cnt2+=1
        

        res=[]
        minCnt=n//3

        if cnt1>minCnt:
            res.append(el1)

        if cnt2>minCnt:
            res.append(el2)
            
        return res
        
        


